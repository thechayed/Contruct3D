"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[181],{2181:(e,t,r)=>{r.d(t,{USDZLoader:()=>a});var o=r(9451),n=r(7680);class s{parse(e){const t={},r=e.split("\n");let o=null,n=t;const s=[t];for(const e of r)if(e.includes("=")){const t=e.split("="),r=t[0].trim(),o=t[1].trim();if(o.endsWith("{")){const e={};s.push(e),n[r]=e,n=e}else n[r]=o}else if(e.endsWith("{")){const e=n[o]||{};s.push(e),n[o]=e,n=e}else if(e.endsWith("}")){if(s.pop(),0===s.length)continue;n=s[s.length-1]}else if(e.endsWith("(")){const t={};s.push(t),o=e.split("(")[0].trim()||o,n[o]=t,n=t}else e.endsWith(")")?(s.pop(),n=s[s.length-1]):o=e.trim();return t}}class a extends o.Loader{constructor(e){super(e)}load(e,t,r,n){const s=this,a=new o.FileLoader(s.manager);a.setPath(s.path),a.setResponseType("arraybuffer"),a.setRequestHeader(s.requestHeader),a.setWithCredentials(s.withCredentials),a.load(e,(function(r){try{t(s.parse(r))}catch(t){n?n(t):console.error(t),s.manager.itemError(e)}}),r,n)}parse(e){const t=new s;function r(e){const t=e.slice(0,7),r=new Uint8Array([80,88,82,45,85,83,68,67]);return t.every(((e,t)=>e===r[t]))}const a=n.AO(new Uint8Array(e)),i=function(e){const s={};(new o.FileLoader).setResponseType("arraybuffer");for(const o in e){if(o.endsWith("png")){const t=new Blob([e[o]],{type:{type:"image/png"}});s[o]=URL.createObjectURL(t)}if(o.endsWith("usd")||o.endsWith("usda")){if(r(e[o])){console.warn("THREE.USDZLoader: Crate files (.usdc or binary .usd) are not supported.");continue}const a=n.he(e[o]);s[o]=t.parse(a)}}return s}(a),c=function(e){if(e.length<1)return;const t=Object.keys(e)[0];let o=!1;if(t.endsWith("usda"))return e[t];if(t.endsWith("usdc"))o=!0;else if(t.endsWith("usd")){if(!r(e[t]))return e[t];o=!0}o&&console.warn("THREE.USDZLoader: Crate files (.usdc or binary .usd) are not supported.")}(a);if(void 0===c)return console.warn("THREE.USDZLoader: No usda file found."),new o.Group;const f=n.he(c),l=t.parse(f);function p(e,t){if(e){if(void 0!==t){const r=`def Mesh "${t}"`;if(r in e)return e[r]}for(const t in e){const r=e[t];if(t.startsWith("def Mesh"))return"point3f[] points"in e&&(r["point3f[] points"]=e["point3f[] points"]),"texCoord2f[] primvars:st"in e&&(r["texCoord2f[] primvars:st"]=e["texCoord2f[] primvars:st"]),"int[] primvars:st:indices"in e&&(r["int[] primvars:st:indices"]=e["int[] primvars:st:indices"]),r;if("object"==typeof r){const e=p(r);if(e)return e}}}}function u(e,t=""){for(const r in e){const o=e[r];if(r.startsWith("def Material"+t))return o;if("object"==typeof o){const e=u(o,t);if(e)return e}}}function d(e,t){t["float inputs:rotation"]&&(e.rotation=parseFloat(t["float inputs:rotation"])),t["float2 inputs:scale"]&&(e.repeat=(new o.Vector2).fromArray(JSON.parse("["+t["float2 inputs:scale"].replace(/[()]*/g,"")+"]"))),t["float2 inputs:translation"]&&(e.offset=(new o.Vector2).fromArray(JSON.parse("["+t["float2 inputs:translation"].replace(/[()]*/g,"")+"]")))}function m(e,t){for(const r in e){const o=e[r];if(r.startsWith(`def Shader "${t}"`))return o;if("object"==typeof o){const e=m(o,t);if(e)return e}}}function h(e){if("asset inputs:file"in e){const t=e["asset inputs:file"].replace(/@*/g,""),r=(new o.TextureLoader).load(i[t]),n={'"clamp"':o.ClampToEdgeWrapping,'"mirror"':o.MirroredRepeatWrapping,'"repeat"':o.RepeatWrapping};return"token inputs:wrapS"in e&&(r.wrapS=n[e["token inputs:wrapS"]]),"token inputs:wrapT"in e&&(r.wrapT=n[e["token inputs:wrapT"]]),r}return null}function S(e){const t=function(e){if(!e)return;let t=new o.BufferGeometry;if("int[] faceVertexIndices"in e){const r=JSON.parse(e["int[] faceVertexIndices"]);t.setIndex(r)}if("point3f[] points"in e){const r=JSON.parse(e["point3f[] points"].replace(/[()]*/g,"")),n=new o.BufferAttribute(new Float32Array(r),3);t.setAttribute("position",n)}if("normal3f[] normals"in e){const r=JSON.parse(e["normal3f[] normals"].replace(/[()]*/g,"")),n=new o.BufferAttribute(new Float32Array(r),3);t.setAttribute("normal",n)}else t.computeVertexNormals();if("float2[] primvars:st"in e&&(e["texCoord2f[] primvars:st"]=e["float2[] primvars:st"]),"texCoord2f[] primvars:st"in e){const r=JSON.parse(e["texCoord2f[] primvars:st"].replace(/[()]*/g,"")),n=new o.BufferAttribute(new Float32Array(r),2);if("int[] primvars:st:indices"in e){t=t.toNonIndexed();const r=JSON.parse(e["int[] primvars:st:indices"]);t.setAttribute("uv",function(e,t){const r=e.array,n=e.itemSize,s=new r.constructor(t.length*n);let a=0,i=0;for(let e=0,o=t.length;e<o;e++){a=t[e]*n;for(let e=0;e<n;e++)s[i++]=r[a++]}return new o.BufferAttribute(s,n)}(n,r))}else t.setAttribute("uv",n)}return t}(function(e){if(e){if("prepend references"in e){const t=e["prepend references"].split("@"),r=t[1].replace(/^.\//,""),o=t[2].replace(/^<\//,"").replace(/>$/,"");return p(i[r],o)}return p(e)}}(e)),r=function(e){const t=new o.MeshPhysicalMaterial;if(void 0!==e){if('def Shader "PreviewSurface"'in e){const r=e['def Shader "PreviewSurface"'];if("color3f inputs:diffuseColor.connect"in r){const n=r["color3f inputs:diffuseColor.connect"],s=m(l,/(\w+).output/.exec(n)[1]);t.map=h(s),t.map.colorSpace=o.SRGBColorSpace,'def Shader "Transform2d_diffuse"'in e&&d(t.map,e['def Shader "Transform2d_diffuse"'])}else if("color3f inputs:diffuseColor"in r){const e=r["color3f inputs:diffuseColor"].replace(/[()]*/g,"");t.color.fromArray(JSON.parse("["+e+"]"))}if("color3f inputs:emissiveColor.connect"in r){const n=r["color3f inputs:emissiveColor.connect"],s=m(l,/(\w+).output/.exec(n)[1]);t.emissiveMap=h(s),t.emissiveMap.colorSpace=o.SRGBColorSpace,t.emissive.set(16777215),'def Shader "Transform2d_emissive"'in e&&d(t.emissiveMap,e['def Shader "Transform2d_emissive"'])}else if("color3f inputs:emissiveColor"in r){const e=r["color3f inputs:emissiveColor"].replace(/[()]*/g,"");t.emissive.fromArray(JSON.parse("["+e+"]"))}if("normal3f inputs:normal.connect"in r){const n=r["normal3f inputs:normal.connect"],s=m(l,/(\w+).output/.exec(n)[1]);t.normalMap=h(s),t.normalMap.colorSpace=o.NoColorSpace,'def Shader "Transform2d_normal"'in e&&d(t.normalMap,e['def Shader "Transform2d_normal"'])}if("float inputs:roughness.connect"in r){const n=r["float inputs:roughness.connect"],s=m(l,/(\w+).output/.exec(n)[1]);t.roughness=1,t.roughnessMap=h(s),t.roughnessMap.colorSpace=o.NoColorSpace,'def Shader "Transform2d_roughness"'in e&&d(t.roughnessMap,e['def Shader "Transform2d_roughness"'])}else"float inputs:roughness"in r&&(t.roughness=parseFloat(r["float inputs:roughness"]));if("float inputs:metallic.connect"in r){const n=r["float inputs:metallic.connect"],s=m(l,/(\w+).output/.exec(n)[1]);t.metalness=1,t.metalnessMap=h(s),t.metalnessMap.colorSpace=o.NoColorSpace,'def Shader "Transform2d_metallic"'in e&&d(t.metalnessMap,e['def Shader "Transform2d_metallic"'])}else"float inputs:metallic"in r&&(t.metalness=parseFloat(r["float inputs:metallic"]));if("float inputs:clearcoat.connect"in r){const n=r["float inputs:clearcoat.connect"],s=m(l,/(\w+).output/.exec(n)[1]);t.clearcoat=1,t.clearcoatMap=h(s),t.clearcoatMap.colorSpace=o.NoColorSpace,'def Shader "Transform2d_clearcoat"'in e&&d(t.clearcoatMap,e['def Shader "Transform2d_clearcoat"'])}else"float inputs:clearcoat"in r&&(t.clearcoat=parseFloat(r["float inputs:clearcoat"]));if("float inputs:clearcoatRoughness.connect"in r){const n=r["float inputs:clearcoatRoughness.connect"],s=m(l,/(\w+).output/.exec(n)[1]);t.clearcoatRoughness=1,t.clearcoatRoughnessMap=h(s),t.clearcoatRoughnessMap.colorSpace=o.NoColorSpace,'def Shader "Transform2d_clearcoatRoughness"'in e&&d(t.clearcoatRoughnessMap,e['def Shader "Transform2d_clearcoatRoughness"'])}else"float inputs:clearcoatRoughness"in r&&(t.clearcoatRoughness=parseFloat(r["float inputs:clearcoatRoughness"]));if("float inputs:ior"in r&&(t.ior=parseFloat(r["float inputs:ior"])),"float inputs:occlusion.connect"in r){const n=r["float inputs:occlusion.connect"],s=m(l,/(\w+).output/.exec(n)[1]);t.aoMap=h(s),t.aoMap.colorSpace=o.NoColorSpace,'def Shader "Transform2d_occlusion"'in e&&d(t.aoMap,e['def Shader "Transform2d_occlusion"'])}}if('def Shader "diffuseColor_texture"'in e){const r=e['def Shader "diffuseColor_texture"'];t.map=h(r),t.map.colorSpace=o.SRGBColorSpace}if('def Shader "normal_texture"'in e){const r=e['def Shader "normal_texture"'];t.normalMap=h(r),t.normalMap.colorSpace=o.NoColorSpace}}return t}(function(e){if(e){if("rel material:binding"in e){const t=e["rel material:binding"].replace(/^<\//,"").replace(/>$/,"").split("/");return u(l,` "${t[1]}"`)}return u(e)}}(e)),n=t?new o.Mesh(t,r):new o.Object3D;if("matrix4d xformOp:transform"in e){const t=JSON.parse("["+e["matrix4d xformOp:transform"].replace(/[()]*/g,"")+"]");n.matrix.fromArray(t),n.matrix.decompose(n.position,n.quaternion,n.scale)}return n}const g=new o.Group;return function e(t,r){for(const o in t)if(o.startsWith("def Scope"))e(t[o],r);else if(o.startsWith("def Xform")){const n=S(t[o]);/def Xform "(\w+)"/.test(o)&&(n.name=/def Xform "(\w+)"/.exec(o)[1]),r.add(n),e(t[o],n)}}(l,g),g}}}}]);